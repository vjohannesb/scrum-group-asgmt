@using SharedLibrary.Models.ProductModels
@if (Product == null)
{
    <p>Loading...</p>
}
else
{
    <div class="product-container @(ClassName ?? "")">
        <!-- Circle -->
        <div class="circle">NEW</div>

        <!-- Product Image-->
        <img src="https://via.placeholder.com/350/EEEEEE/20D3C2?text=@Product.ProductName" alt="Product Image" class="product-img" />

        <!-- Bottom Title -->
        <div class="product-title">
            @Product.ProductName
        </div>

        <!-- Product Overlay -->
        <div class="product-overlay">
            <!-- Pill -->
            <div class="row justify-content-end">
                <div class="product-overlay-pill">
                    <i class="fas fa-circle pop-toggle-btn"></i>
                    <div class="pop-toggle">
                        <i class="fas fa-heart @(checkWishlist ? "" : "text-teal")" @onclick='(() => checkIfActive(Product.ProductId))'>
                            <span class="pop-modal">@(checkWishlist ? "Save item" : "Remove item from wishlist")</span>
                        </i>
                        <i class="fas fa-random">
                            <span class="pop-modal">Compare</span>
                        </i>
                        <i class="fas fa-search" @onclick="() => GoToProduct(Product.ProductId)">
                            <span class="pop-modal">Details</span>
                        </i>
                        <i class="fas fa-shopping-cart" data-bs-toggle="modal" data-bs-target="#quickViewModal" @onclick="UpdateModalProduct">
                            <span class="pop-modal">Add to cart</span>
                        </i>
                    </div>
                </div>
            </div>
            
            <!-- Info -->
            <div class="text-white">
                <div class="product-name my-2">
                    <a href="/products/@Product.ProductId">
                        @Product.ProductName
                    </a>
                    
                </div>

                <!-- Tags -->
                <div class="product-tags my-2">
                    <span class="px-2 border border-1">Fashion</span>
                </div>

                <!-- Old Price -->
                <div class="old-price my-2 text-decoration-line-through">
                    $@(Product.Price + @Product.Discount)
                </div>

                <!-- New Price -->
                <div class="d-flex justify-content-between align-items-center my-2 text-teal fs-4">
                    <div class="fw-medium">
                        $@Product.Price
                    </div>

                    <!-- Rating -->
                    <div>
                        <Rating Stars="@(Product.Rating ?? 0)" Size="1" SpaceBetween="0.15"/>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public ProductViewModel Product { get; set; }

    [Parameter]
    public string ClassName { get; set; }

    [Parameter]
    public ProductViewModel ModalProduct { get; set; }

    [Parameter]
    public EventCallback<ProductViewModel> ModalProductChanged { get; set; }

    private bool checkWishlist { get; set; }
    private List<Tag> _modelTags { get; set; }
    private Tag _firstTag { get; set; }

    // TODO: GetTags i API

    protected override async Task OnInitializedAsync()
    {
        checkWishlist = true;

        var response = await apiService.checkIfInWishlist(Product.ProductId);
        if(response == true)
            checkWishlist = false;

        if (Product == null)
            return;

        //await GetTags();
    }

    private async Task UpdateModalProduct()
        => await ModalProductChanged.InvokeAsync(Product);

    //Kontrollera vilka hjärtan som ska vara ifyllda?
    public async Task checkIfActive(int productId)
    {
        var response = await apiService.checkIfInWishlist(productId);

        if(response == true){
            checkWishlist = true;
            await DeleteWishlistItemApi(productId);
        }
        else{
            checkWishlist = false;
            await SendWishlistItemToApi(productId);
        }
    }
    public async Task<HttpResponseMessage> SendWishlistItemToApi(int productId)
    {
        var response = await apiService.SendToAPIAsync(HttpMethod.Post, apiService.AddWishlistUrl, productId, true);
        if (response.IsSuccessStatusCode)
        {
            //var payload = await response.Content.ReadFromJsonAsync<ResponseModel>();
        }
        return response;
    }

    public async Task<HttpResponseMessage> DeleteWishlistItemApi(int productId)
    {
        var response = await apiService.SendToAPIAsync(HttpMethod.Delete, apiService.DeleteWishlistUrl, productId, true);
        if (response.IsSuccessStatusCode)
        {
            //var payload = await response.Content.ReadFromJsonAsync<ResponseModel>();
        }
        return response;
    }


    private void GoToProduct(int id)
        => navigationManager.NavigateTo($"/products/{id}");

    //private async Task GetTags()
    //{
    //    var response = await apiService.SendToAPIAsync(HttpMethod.Get, apiService.TagsUrl);
    //    if (response.IsSuccessStatusCode)
    //    {
    //        _modelTags = await response.Content.ReadFromJsonAsync<List<Tag>>();
    //        if (_modelTags.Count > 0)
    //        {
    //            _firstTag = _modelTags[0];
    //        }
    //    }
    //    else
    //    {
    //        _error = "Could not load tags.";
    //        _modelTags = new List<Tag>();
    //    }
    //}
}

