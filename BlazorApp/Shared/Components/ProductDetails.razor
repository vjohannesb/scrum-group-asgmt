@inject OrderState orderState
@inject ModalState modalState
@inject WishlistState wishlistState
@inject CompareState compareState
@implements IDisposable

@if (Product != null)
{
    <div class="row main-row">
        <!-- Image Column -->
        @if (!DetailsPage)
        {
            <div class="col-5 image-column">
                <div class="product-image-display w-100">
                    <img src="https://via.placeholder.com/360" alt="Placeholder">
                </div>

                <div class="product-image-selection w-100">
                    <img src="https://via.placeholder.com/70" alt="Placeholder">
                    <img src="https://via.placeholder.com/70" alt="Placeholder">
                    <img src="https://via.placeholder.com/70" alt="Placeholder">
                    <img src="https://via.placeholder.com/70" alt="Placeholder">
                </div>
            </div>
        }
        else
        {
            <div class="col-5 d-flex detail-imgs">
                <div class="product-image-display">
                    <img alt="Placeholder" src="https://via.placeholder.com/400">
                </div>

                <div class="d-flex flex-column justify-content-between ms-2">
                    <img class="rounded-3" alt="Placeholder" src="https://via.placeholder.com/90">
                    <img class="rounded-3" alt="Placeholder" src="https://via.placeholder.com/90">
                    <img class="rounded-3" alt="Placeholder" src="https://via.placeholder.com/90">
                    <img class="rounded-3" alt="Placeholder" src="https://via.placeholder.com/90">
                </div>
            </div>
        }

        <!-- Info Column -->
        <div class="col-7 info-column">
            @if (!DetailsPage)
            {
                <!-- Review + Logo Row -->
                <div class="row review-brand-row">
                    <div class="col-3">
                        <Rating Stars="@(Product.Rating ?? 0)" Size="0.875" />
                    </div>
                    <div class="col">
                        <div class="reviews-amount">(2 customer reviews)</div>
                    </div>
                    <div class="col logo">
                        <img src="/src/img/brands/@(Product.Brand?.BrandName?.ToLower()).svg" alt="@(Product.Brand?.BrandName) Logo">
                    </div>
                </div>
            }

            <!-- Title Row -->
            <div class="row title-row">
                <h4 class="text-teal product-title">@Product.ProductName</h4>
            </div>

            <!-- Description Row -->
            <div class="row description-row">
                <p>
                    @Product.ProductDescription
                </p>
            </div>

            <!-- Price + Stock Row -->
            <div class="row mb-3 g-0 price-status-row align-items-center">

                <div class="col-auto">
                    <p class="current-price">$@Product.Price</p>
                </div>
                @if (Product.Discount > 0)
                {
                    <div class="col-3">
                        <div class="old-price pt-1 ps-1">$@(Product.Price + Product.Discount)</div>
                    </div>
                }
                else
                {
                    <div class="col-3">
                        <div class="old-price pt-1 ps-1"></div>
                    </div>
                }



                <div class="col-3">
                    <div class="stock-status" title="@(Product.InStock > 50 ? "> 50" : Product.InStock > 0 ? "0-50" : "Out of stock")">
                        <i class="fas fa-archive @(Product.InStock > 50 ? "in-stock" : Product.InStock > 0 ? "low-stock" : "no-stock")"></i>
                        @(Product.InStock > 50 ? "In stock" : Product.InStock > 0 ? "Limited stock" : "Out of stock")
                    </div>
                </div>
            </div>

            <!-- Buy + Actions Row -->
            <div class="row mb-4 buy-actions-row">
                <div class="col-3">
                    <QuantityInput @bind-Quantity="_quantity" />
                </div>

                <button class="col-4 ms-3 me-3 add-to-cart" data-bs-dismiss="modal"
                        @onclick="AddToCartAsync" disabled="@(Product.InStock < 1)">
                    <i class="fas fa-shopping-cart"></i>
                    <span>Add to cart</span>
                </button>

                <div class="col row align-items-center justify-content-center m-0 g-0">
                    <div class="col-2 me-2 color-selection-btn">
                        <input id="toggleColors@(DetailsPage ? "Details" : "")" type="checkbox" class="visually-hidden" />
                        <label for="toggleColors@(DetailsPage ? "Details" : "")">
                            <img src="/src/img/shop/color-circle.svg" alt="">
                        </label>

                        <span class="color-span">
                            @if (Product?.Colors != null && Product.Colors.Count() > 0)
                            {
                                @foreach (var color in Product.Colors)
                                {
                                    <span class="color-circle" style="background: @color.ColorName;" title="@color.ColorName" />
                                }
                            }
                        </span>
                    </div>

                    <div class="col-2 me-2 compare-item">
                        <span>
                            <i class="fas fa-random" @onclick="AddToCompareAsync"></i>
                        </span>
                    </div>
                    
                        <div class="col-2 me-2 save-item">
                            <span>
                                <i class="fas fa-heart
                           @(Product.IsInWishlist ? "text-teal" : "")
                           @(_togglingWishlist ? "toggling" : "")"
                                   @onclick="ToggleWishlist">
                                </i>
                            </span>
                    </div>
                    </div>
            </div>

            <!-- Category Row -->
            <div class="row mb-4 pt-2 category-row">
                <div class="col">
                    <span>
                        Category:
                        <a href="/shop/@Product.Category" class="product-category" data-bs-dismiss="modal"
                           @onclick="() => GoToCategory(Product.Category)">
                            @Product.Category
                        </a>
                    </span>
                </div>
            </div>

            <!-- Tags Row -->
            <div class="row pt-2 tags-row">
                <div class="col">
                    <span class="tags-title">Tags:</span>
                    @if (Product.Tags != null)
                    {
                        @foreach (var tag in Product.Tags)
                        {
                            <span class="tag-box me-1">@tag.TagName</span>
                        }

                    }
                </div>
            </div>

            <!-- Share Row -->
            <div class="row mb-3 share-row">
                <div class="col">
                    <span>Share: </span>
                    <span class="circle circle-facebook">
                        <i class="fab fa-facebook-f"></i>
                    </span>
                    <span class="circle circle-twitter">
                        <i class="fab fa-twitter"></i>
                    </span>
                    <span class="circle circle-pinterest">
                        <i class="fab fa-pinterest-p"></i>
                    </span>
                    <span class="circle circle-linkedin">
                        <i class="fab fa-linkedin-in"></i>
                    </span>
                    <span class="circle circle-email">
                        <i class="fas fa-envelope"></i>
                    </span>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public ProductViewModel Product { get; set; }

    [Parameter]
    public bool DetailsPage { get; set; } = false;

    private int _quantity = 1;
    private bool _signedIn;
    private bool _togglingWishlist;





    protected override async Task OnInitializedAsync()
    {
        modalState.OnChange += StateHasChanged;
        wishlistState.OnChange += StateHasChanged;

        // Validera token / kolla om användaren är inloggad
        var tokenResponse = await apiService.SendToAPIAsync(HttpMethod.Get, apiService.ValidateTokenUrl, auth: true);
        if (tokenResponse.IsSuccessStatusCode)
        {
            _signedIn = true;
            var response = await apiService.SendToAPIAsync(HttpMethod.Get, apiService.ProductInWishlistUrl(Product.ProductId), auth: true);
            if (response.IsSuccessStatusCode)
            {
                var payload = await response.Content.ReadFromJsonAsync<ResponseModel>();
                Product.IsInWishlist = payload.Succeeded;
            }
            else
            {
                _signedIn = false;
                Product.IsInWishlist = false;
            }
        }
    }

    public void Dispose()
    {
        modalState.OnChange -= StateHasChanged;
        wishlistState.OnChange -= StateHasChanged;
    }

    private void GoToSignIn()
        => navigationManager.NavigateTo("/myaccount");
    private async Task ToggleWishlist()

    {
        if (!_signedIn)
            GoToSignIn();

        if (!_togglingWishlist)
        {
            _togglingWishlist = true;

            if (!Product.IsInWishlist)
                await AddToWishlistAsync();
            else
                await RemoveFromWishlistAsync();

            _togglingWishlist = false;
        }
    }

    private async Task AddToWishlistAsync()
    {
        var response = await apiService.SendToAPIAsync(HttpMethod.Post, apiService.ProductInWishlistUrl(Product.ProductId), auth: true);
        if (response.IsSuccessStatusCode)
        {
            Product.IsInWishlist = true;
            wishlistState.WishlistProducts = wishlistState.WishlistProducts.Append(Product).ToList();
        }
    }

    private async Task RemoveFromWishlistAsync()
    {
        var response = await apiService.SendToAPIAsync(HttpMethod.Delete, apiService.ProductInWishlistUrl(Product.ProductId), auth: true);
        if (response.IsSuccessStatusCode)
        {
            Product.IsInWishlist = false;
            wishlistState.WishlistProducts = wishlistState.WishlistProducts
                .Where(wp => wp.ProductId != Product.ProductId)
                .ToList();
        }
    }

    private async Task AddToCompareAsync()
    {
        if (compareState.CompareProducts?.Count > 0)
        {
            if (compareState.CompareProducts?.Count < 3)
            {
                Console.WriteLine("Fungerar");
                var productInCompare = compareState.CompareProducts.FirstOrDefault(p => p.ProductId == Product.ProductId);
                if (productInCompare != null)
                {
                    //gör inget
                }
                else
                    compareState.CompareProducts.Add(Product);
            }
            compareState.NotifyStateChanged();
        }
        else
            compareState.CompareProducts = new List<ProductViewModel> { Product };

        await AddToLocalStorageCompareAsync();
    }

    private async Task AddToLocalStorageCompareAsync()
    {
        var compare = compareState.CompareProducts
        .Select(scp => new ProductViewModel
        {
            ProductId = scp.ProductId,
            ProductName = scp.ProductName,
            Rating = scp.Rating,
            Price = scp.Price,
            Discount = scp.Discount,
            ProductImage = scp.ProductImage,
            InStock = scp.InStock,
            Brand = scp.Brand
        })
           .ToList();
        await apiService.SaveToLocalStorageAsync<List<ProductViewModel>>("compare", compare);
    }








    private async Task AddToCartAsync()
    {
        Product.Quantity = _quantity;
        if (orderState.ShoppingCartProducts?.Count > 0)
        {
            var productInCart = orderState.ShoppingCartProducts.FirstOrDefault(p => p.ProductId == Product.ProductId);
            if (productInCart != null)
                productInCart.Quantity += _quantity;
            else
                orderState.ShoppingCartProducts.Add(Product);

            orderState.NotifyStateChanged();
        }
        else
            orderState.ShoppingCartProducts = new List<ProductViewModel> { Product };

        await AddToLocalStorageAsync();
    }

    private async Task AddToLocalStorageAsync()
    {
        var cart = orderState.ShoppingCartProducts
            .Select(scp => new ShoppingCartItem { ProductId = scp.ProductId, Quantity = scp.Quantity })
            .ToList();
        await apiService.SaveToLocalStorageAsync<List<ShoppingCartItem>>("cart", cart);
    }


    private void GoToCategory( string category )
        => navigationManager.NavigateTo($"/shop/{category}", true);

    //protected override async Task OnInitializedAsync()
    //{
    //    await GetReviewsAsync();
    //}

    //private async Task GetReviewsAsync()
    //{
    //    var response = await apiService.SendToAPIAsync(HttpMethod.Get, "reviewsurl...");
    //    if (response.IsSuccessStatusCode)
    //        _reviews = await response.Content.ReadFromJsonAsync<List<Review>>();
    //    else
    //    {
    //        _reviews = new List<Review>();
    //    }
    //}
}