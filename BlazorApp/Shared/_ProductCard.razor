@if (Product == null)
{
    <p>Loading...</p>
}
else
{
    <div class="d-block w-100 rounded height p-5">
        <div class="prod-card mb-5">
            <div class="front-card rounded p-0 ">
                <div class="hide">
                    <_small_circle />
                </div>
                <div class="card-img d-flex justify-content-center align-items-center">
                    <img class="d-block rounded" src="/src/img/prod4.svg">
                </div>
                <div class="hide">
                    <div class="front-card-textbox bg-dark-blue d-flex align-items-center rounded-bottom">
                        <p class="text-light my-0 ms-5 roboto">@Product.ProductName</p>
                    </div>
                </div>
            </div>
            <div class="hover-card rounded p-0 ">
                <div class="d-flex justify-content-end">
                <div class="product-overlay-pill">
                        <i class="fas fa-circle pop-toggle-btn"></i>
                        <div class="pop-toggle">
                            <i class="fas fa-heart @(checkWishlist ? "" : "text-teal")" @onclick='(() => checkIfActive(Product.ModelId))'> 
                                <span class="pop-modal">@(checkWishlist ? "Save item" : "Remove item from wishlist")</span>
                            </i>
                            <i class="fas fa-random">
                                <span class="pop-modal">Compare</span>
                            </i>
                            <i class="fas fa-search">
                                <span class="pop-modal">Details</span>
                            </i>
                            <i class="fas fa-shopping-cart" data-bs-toggle="modal" data-bs-target="#quickViewModal" @onclick="UpdateModalProduct">
                                <span class="pop-modal">Add to cart</span>
                            </i>
                        </div>
                    </div>
                </div>
                <div class="hover-content text-light">
                    <div class="text d-flex flex-column m-4">
                        <p class="m-1 roboto">@Product.ProductName</p>
                        <p class="m-1 roboto fashion-border">@Product.Category</p>
                        <p class="m-1 roboto">
                            <strike>$@Product.Price</strike>
                        </p>
                        <div class="m-w-roboto-24 text-teal">
                            $@Product.Price
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public ProductModel Product { get; set; }

    [Parameter]
    public ProductModel ModalProduct { get; set; }

    [Parameter]
    public EventCallback<ProductModel> ModalProductChanged { get; set; }


    private bool checkWishlist { get; set; }
    private List<ModelTag> _modelTags { get; set; }
    private ModelTag _firstTag { get; set; }

    private string _error;

    // TODO: GetModelTags i API

    protected override async Task OnInitializedAsync()
    {
        checkWishlist = true;

        var response = await apiService.checkIfInWishlist(Product.ModelId);
        if(response == true)
            checkWishlist = false;

        Console.WriteLine($"vid start {checkWishlist}");
        if (Product == null)
            return;
        
        //await GetModelTags();
    }

    private Task UpdateModalProduct()
        => ModalProductChanged.InvokeAsync(Product);

//Kontrollera vilka hjärtan som ska vara ifyllda?
    public async Task checkIfActive(int modelId)
    {
        var response = await apiService.checkIfInWishlist(modelId);
       
        if(response == true){
           checkWishlist = true;
           await DeleteWishlistItemApi(modelId);
           Console.WriteLine($"tagits bort {checkWishlist}");
        }
        else{
            checkWishlist = false;
            await SendWishlistItemToApi(modelId);
            Console.WriteLine($"lagts till {checkWishlist}");
        } 
    }
     public async Task SendWishlistItemToApi(int modelId)
    {
        var response = await apiService.AddToWishlist(modelId);
    }
    public async Task DeleteWishlistItemApi(int modelId)
    {
        var response = await apiService.DeleteFromWishlist(modelId);
    }

   //if(heart != ifyllt){
       
    //}
    //else{
       @* public async Task DeleteFromApi(int model)
        {
            //Hämta customerId och prodId
            //var wishlistItem = new WishlistModel(1, model);
            //Skicka id till API
            //var response = await apiService.AddToWishlist(wishlistItem);
        }*@
    //}








    //private async Task GetModelTags()
    //{
    //    var response = await apiService.SendToAPIAsync(HttpMethod.Get, apiService.ModelTagsUrl);
    //    if (response.IsSuccessStatusCode)
    //    {
    //        _modelTags = await response.Content.ReadFromJsonAsync<List<ModelTag>>();
    //        if (_modelTags.Count > 0)
    //        {
    //            _firstTag = _modelTags[0];
    //        }
    //    }
    //    else
    //    {
    //        _error = "Could not load tags.";
    //        _modelTags = new List<ModelTag>();
    //    }
    //}
}

