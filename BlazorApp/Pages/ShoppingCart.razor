@page "/shoppingcart"

<CheckoutBreadcrumb />

@if (_cartProducts == null)
{
    <p class="text-center mt-5">Loading...</p>
}
else if (_cartProducts.Count < 1)
{
    <p class="text-center mt-5">There are no products in your shopping cart.</p>
}
else
{
    <section class="container my-5">
        <div class="row g-5">
            <!-- Products Table -->
            <div class="col-8 table-responsive">
                <div class="row">
                    <table class="table align-middle">
                        <thead>
                            <tr>
                                <th scope="col"></th>
                                <th scope="col">Product</th>
                                <th scope="col">Price</th>
                                <th scope="col">Quantity</th>
                                <th scope="col">Subtotal</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var product in _cartProducts)
                            {
                                <tr>
                                    <CartProduct Product="@product" />
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <div class="row mt-4 justify-content-between align-items-center">
                    <div class="col-auto">
                        <CouponForm @bind-Coupon="_coupon" SubmitAction="ApplyCoupon" />
                    </div>

                    <div class="col-auto">
                        <button type="button" class="col-auto btn btn-update-cart bg-dark-blue">UPDATE CART</button>
                    </div>
                </div>
            </div>

            <!-- Cart Totals -->
            <div class="col-4">
                <h4 id="cartTotalsTitle" class="py-3 mb-0">CART TOTALS</h4>
                <div class="cart-totals p-4">

                    <!-- Subtotal -->
                    <div class="row justify-content-between fw-bold">
                        <div class="col-auto">Subtotal</div>
                        <div class="col-auto text-teal">$@_subTotal</div>
                    </div>

                    <!-- Shipping methods -->
                    <div class="row justify-content-between">
                        <div class="col-auto fw-bold">Shipping</div>
                        <div class="col-auto">
                            <EditForm Model="@_selectedShipping" novalidate>
                                <DataAnnotationsValidator />

                                <InputRadioGroup Name="Shipping" @bind-Value="_selectedShippingId">
                                    @foreach (var shippingMethod in _shippingMethods)
                                        {
                                        <div class="radio-container d-flex align-items-center justify-content-between">
                                            <label class="me-1">
                                                <span>@shippingMethod.Name</span>
                                                <span class="text-teal">
                                                    @(shippingMethod.Price > 0 ? $"${shippingMethod.Price}" : "")
                                                </span>
                                            </label>
                                            <InputRadio Name="Shipping" Value="shippingMethod.ShippingId" class="float-end" novalidate />
                                        </div>
                                        }
                                </InputRadioGroup>
                            </EditForm>
                        </div>
                    </div>

                    <!-- TOTAL -->
                    <div class="row justify-content-between fw-bold fs-5">
                        <div class="col-auto">
                            <span>TOTAL</span>
                        </div>

                        <div class="col-auto">
                            <span class="text-teal">$@(_subTotal + _shippingMethods[_selectedShippingId].Price)</span>
                        </div>
                    </div>

                    <!-- Proceed to Checkout -->
                    <div class="row justify-content-center">
                        <div class="col-auto">
                            <button class="btn btn-goto-checkout" @onclick="GoToCheckout">
                                PROCEED TO CHECKOUT
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
}


<!-- < YOU MAY ALSO LIKE -->
<section class="my-5 py-5">
    <div class="my-5">
        <ZigZagTitle BlackText="you may" TealText="also like" />
    </div>
    <ProductCarousel Products="_products" />
</section>


@code {
    private List<ProductViewModel> _cartProducts;
    private List<Shipping> _shippingMethods;

    private Shipping _selectedShipping;
    private int _selectedShippingId;

    private CouponViewModel _coupon;

    private decimal _subTotal;

    private List<ProductModel> _products;

    protected override async Task OnInitializedAsync()
    {
        _cartProducts = new List<ProductViewModel>();
        _products = new List<ProductModel>();

        await GetProductsAsync();
        await GetShoppingCartAsync();

        //var shippingResponse = await apiService.SendToAPIAsync(HttpMethod.Get, apiService.ShippingMethodsUrl);
        //if (response.IsSuccessStatusCode)
        //    _shippingMethods = await shippingResponse.Content.ReadFromJsonAsync<List<Shipping>>();

        _shippingMethods = new List<Shipping>
        {
            new Shipping { Name = "Flat rate", Price = 20, ShippingId = 0},
            new Shipping { Name = "Local pickup", Price = 25, ShippingId = 1},
            new Shipping { Name = "Free shipping", Price = 0, ShippingId = 2}
        };

        _selectedShippingId = 0;
        _selectedShipping = _shippingMethods[_selectedShippingId];

        _coupon = new CouponViewModel();
    }

    private async Task GetShoppingCartAsync()
    {
        var cart = await apiService.GetFromLocalStorageAsync<List<ShoppingCartItem>>("cart");

        var response = await apiService.SendToAPIAsync(HttpMethod.Post, apiService.MultipleProductsUrl, serializeContent: cart);
        if (!response.IsSuccessStatusCode)
            return;

        _cartProducts = await response.Content.ReadFromJsonAsync<List<ProductViewModel>>();
        _subTotal = _cartProducts.Sum(cp => cp.Quantity * cp.Price);
    }

    private async Task GetProductsAsync()
    {
        var response = await apiService.SendToAPIAsync(HttpMethod.Get, apiService.ProductModelsUrl);
        if (!response.IsSuccessStatusCode)
            return;

        _products = await response.Content.ReadFromJsonAsync<List<ProductModel>>();
    }

    private void GoToCheckout()
    {
        var x = 1 + 1;
    }

    private void ApplyCoupon()
    {
        Console.WriteLine($"Applied coupon: {_coupon.CouponCode}");
    }
}
