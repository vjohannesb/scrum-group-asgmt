@page "/myaccount"

<!-- Breadcrumb -->
<div class="pt-5 pb-5 breadcrumb-section">
    <div class="container d-flex justify-content-between align-items-center">
        <p>My Account</p>
        <nav class="breadcrumb-divider" aria-label="breadcrumb">
            <ol class="breadcrumb breadcrumb-small-text">
                <li class="breadcrumb-item"><a href="/">Home</a></li>
                <li class="breadcrumb-item active" aria-current="page">My Account</li>
            </ol>
        </nav>
    </div>
</div>

@if (_signInModel != null)
{
    <div class="d-flex justify-content-center mt-5 mb-5">

        <!-- Login -->
        <div class="box d-flex justify-content-center p-4 me-4">
            <div>
                <h1>LOGIN</h1>
                <EditForm Model="@_signInModel" OnValidSubmit="@LoginUser">
                    <DataAnnotationsValidator />

                    <div class="mt-4">
                        <label class="mb-2" for="emailLogin">Email <span>*</span></label><br>
                        <InputText class="form-control form" type="email" id="emailLogin" required
                                   @bind-Value="_signInModel.Email" />
                        <ValidationMessage For="() => _signInModel.Email" />
                    </div>

                    <div class="mt-4">
                        <label class="mb-2" for="passwordLogin">Password <span>*</span></label><br>
                        <InputText class="form-control form" type="password" id="passwordLogin" required
                                   @bind-Value="_signInModel.Password" />
                        <ValidationMessage For="() => _signInModel.Password" />
                    </div>

                    <button type="submit" class="mt-4" disabled=@_submitting>
                        LOG IN
                    </button>

                </EditForm>
                <div class="mt-4 d-flex align-items-center justify-content-between">
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" value="" id="rememberMe">
                        <label class="checkbox-label" for="rememberMe">Remember me</label>
                    </div>
                    <a href="#"><span>Lost your password?</span></a>
                </div>
                <p class="or-login-with mt-5"><span class="or-login-with-span">OR LOGIN WITH</span></p>
                <div class="d-flex justify-content-between">
                    <button type="button" class="facebook-btn mt-5">
                        Facebook
                        <img src="/src/img/my_account/Facebook icon.svg">
                    </button>
                    <button type="button" class="google-btn mt-5">
                        Google
                        <img src="/src/img/my_account/Google icon.svg">
                    </button>
                </div>
            </div>
        </div>

        <!-- Register -->
        <div class="box d-flex justify-content-center p-4 ms-4">
            <div>
                <h1>REGISTER</h1>
                <p class="small-text mt-4">
                    Registering for this site allows you to access your order status and
                    history.<br>
                    Just fill in the fields below, and we’ll get a new account set up for you in no<br>
                    time. We will only ask you for information necessary to make the purchase<br>
                    process faster and easier.
                </p>
                <EditForm Model="@_registerModel" OnValidSubmit="@RegisterUser">
                    <DataAnnotationsValidator />

                    <div class="mt-4">
                        <label class="mb-2" for="firstName">First name<span>*</span></label><br>
                        <InputText class="form-control form" type="text" id="firstName" required
                                   @bind-Value="_registerModel.FirstName" />
                        <ValidationMessage For="() => _registerModel.FirstName" />
                    </div>

                    <div class="mt-4">
                        <label class="mb-2" for="lastName">Last name<span>*</span></label><br>
                        <InputText class="form-control form" type="text" id="lastName" required
                                   @bind-Value="_registerModel.LastName" />
                        <ValidationMessage For="() => _registerModel.LastName" />
                    </div>

                    <div class="mt-4">
                        <label class="mb-2" for="emailRegister">Email address<span>*</span></label><br>
                        <InputText class="form-control form" type="email" id="emailRegister" required
                                   @bind-Value="_registerModel.Email" />
                        <ValidationMessage For="() => _registerModel.Email" />
                    </div>

                    <div class="mt-4">
                        <label class="mb-2" for="passwordRegister">Password <span>*</span></label><br>
                        <InputText class="form-control form" type="password" id="passwordRegister" required
                                   @bind-Value="_registerModel.Password" />
                        <ValidationMessage For="() => _registerModel.Password" />
                    </div>

                    <p class="mt-4">
                        Your personal data will be used to support your experience<br>
                        throughout this website, to manage access to your account, and for<br>
                        other purposes described in our <a href="#"><span>privacy policy.</span></a>
                    </p>
                    <button type="submit" class="mt-4" disabled=@_submitting>REGISTER</button>
                </EditForm>
            </div>
        </div>
    </div>
    <_BottomBrandBanner />
}
else
{
    <p>Loading...</p>
}

@code {
    private SignInModel _signInModel;
    private RegisterModel _registerModel;

    private string _error;
    private bool _submitting = false;

    protected override void OnInitialized()
    {
        _signInModel = new SignInModel();
        _registerModel = new RegisterModel();
    }

    private async Task LoginUser()
    {
        _submitting = true;
        _error = string.Empty;

        var response = await apiService.SignInAsync(_signInModel);

        if (response.IsSuccessStatusCode)
            Console.WriteLine("Successfully logged in!");
        else
            Console.WriteLine($"{(int)response.StatusCode} {response.ReasonPhrase}");

        _submitting = false;
    }
    private async Task RegisterUser()
    {
        _submitting = true;
        _error = string.Empty;

        var response = await apiService.RegisterAsync(_registerModel);

        if (response.IsSuccessStatusCode)
        {
            _registerModel = new RegisterModel();
            Console.WriteLine("Successfully registered user!");
        }

        else
            Console.WriteLine($"{(int)response.StatusCode} {response.ReasonPhrase}");

        _submitting = false;
    }
} 